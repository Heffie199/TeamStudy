package com.team.gaoguangjin.算法.排序;

/**
 * 快速排序
 *
 1）选择一个基准元素,通常选择第一个元素或者最后一个元素,
 2）通过一趟排序讲待排序的记录分割成独立的两部分，其中一部分记录的元素值均比基准元素值小。另一部分记录的 元素值比基准值大。
 3）此时基准元素在其排好序后的正确位置
 基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分
 *
 *
 * 设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程称为一趟快速排序。值得注意的是，快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也许会在算法结束时产生变动。
 一趟快速排序的算法是：
 1）设置两个变量i、j，排序开始的时候：i=0，j=N-1；
 2）以第一个数组元素作为关键数据，赋值给key，即key=A[0]；
 3）从j开始向前搜索，即由后开始向前搜索(j--)，找到第一个小于key的值A[j]，将A[j]和A[i]互换；
 4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]，将A[i]和A[j]互换；
 5）重复第3、4步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。
 *
 * 以一个数为基准，然从第一个和最后一个开始向中间靠拢，把右边的第一个小基准的数 和左边的第一个大于基准的数交换。
 * @author:gaoguangjin
 * @date 2017/2/14 18:22
 */
public class QuickSort {
    /**
     * 设置49为基准元素
     * i=0 j=7
     *          49 38 65 97 76 13 27 49
     * 第一次   27 38 65 97 76 13 49 49
     * 第二次   27 38 49 97 76 13 65 49
     * 第三次   27 38 13 97 76 49 65 49
     * 第四次   27 38 13 97 76 49 65 49
     * 第五次   27 38 13 49 76 97 65 49
     *
     *
     * @param args
     */
    public static void main(String[] args) {

    }
}
